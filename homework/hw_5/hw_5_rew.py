# Class work
# Напишите функцию prost(), которая имеет 1 параметр - число. Функция должна вернуть True, если число является простым иначе она должна вернуть False.

# def prost(a):
#     if isinstance(a, (int)):
#         return True
#     else:
#         return False
#
# a = 3.12
#
# print(prost(a))


# Напишите функцию, которая будет возвращать все простые делители числа.


# def number(param):
#     list = []
#     F = True
#
#     for i in range(2, param):
#         if param % i == 0:
#             for del1 in range(2, i):
#                 if i % del1 == 0:
#                     F = False
#             if F == True:
#                 list.append(i)
#     print('Простые делители:', list)
#
# number(6)

# Напишите функцию, которая будет принимать число и возвращать True, если это число является числом фибоначчи иначе она должна вернуть False.

# def is_fibon(n):
#     first = 0
#     second = 1
#
#     for i in range(2, 100):
#         temp = first + second
#         if temp == n:
#             return True
#         elif temp > n:
#             return False
#         first, second = second, temp
#
# print(is_fibon(4))

# Создайте функцию, которая будет проверять, правильно ли расставлены скобки. Пример:
# (()())
# True
# ())(
# False

# def brecets(s):
#    counter = 0
#    for el in s:
#        if el == '(':
#            counter += 1
#        else:
#            counter -= 1
#        if counter < 0:
#            return False
#    if counter == 0:
#         return True
#    else:
#        return False
#
#
# print(brecets('())'))

# def bracets(s):
#     counter = 0
#     for el in s:
#         if el == '(':
#             counter += 1
#         elif el == ')':
#             counter -= 1
#         else:
#             # Можно либо игнорировать, либо сообщать о неправильном символе
#             continue
#         if counter < 0:
#             return False
#     return counter == 0
#
# Проверка примеров
# print(bracets('(()())'))  # True
# print(bracets('())('))    # False
# print(bracets('()'))      # True

# Функция проверяет строку, содержащую символы '(' и ')', и определяет, сбалансированы ли скобки — то есть, каждая открывающая '(' имеет соответствующую закрывающую ')', и порядок скобок правильный.
# Пошаговое объяснение работы функции:
# Создается переменная-счетчик counter, которая изначально равна 0. Этот счетчик отслеживает количество "открытых" скобок, которые еще не были "закрыты".
# Функция проходит по каждому символу строки по очереди:
# Если текущий символ — это открывающая скобка '(', то счетчик увеличивается на 1. Это значит, что у нас появилась новая открытая скобка, которую нужно будет закрыть.
# Если символ — закрывающая скобка ')', то счетчик уменьшается на 1, потому что закрывающая скобка "закрывает" одну из ранее открытых.
# Если в какой-то момент счетчик становится отрицательным (counter < 0), это значит, что закрывающая скобка встретилась раньше, чем была открывающая.
# Такая ситуация ломает логику правильной расстановки, поэтому функция сразу возвращает False.
# После проверки всех символов, если счетчик равен нулю (counter == 0), это значит, что количество открывающих и закрывающих скобок совпало, и их порядок корректен — функция возвращает True.
# Если счетчик не ноль, это значит, что остались незакрытые открывающие скобки, потому функция возвращает False.
#
# Пример
# Вызов brecets("(()())"):
#
# Скобка '(': counter=1
# Скобка '(': counter=2
# Скобка ')': counter=1
# Скобка '(': counter=2
# Скобка ')': counter=1
# Скобка ')': counter=0
# В конце counter=0, значит скобки сбалансированы, возвращается True.
#
# Вызов brecets("())("):
# Скобка '(': counter=1
# Скобка ')': counter=0
# Скобка ')': counter=-1 → меньше 0, сразу False.


# Напишите функцию squares(), которая имеет один параметр - число n. Функция будет возвращать список состоящий из квадратов чисел от 1 до n.


# Напишите функцию, которая возвращает наибольший общий делитель двух чисел.


# Напишите функцию, которая возвращает количество цифр в числе.


# Напишите функцию, которая будет возвращать сумму чётных чисел в списке.


